#!/usr/bin/env python3
"""
Demonstra√ß√£o do AWS Multi-Account Agent

Este script demonstra todas as funcionalidades do AWS Agent
sem precisar de credenciais AWS reais, usando dados simulados.
"""

import os
import sys
import time
from pathlib import Path

# Adiciona o diret√≥rio src ao path para importar os m√≥dulos
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

from aws_agent.core.config import get_config
from aws_agent.core.account_manager import AccountManager
from aws_agent.core.agent import AWSAgent
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.text import Text

console = Console()

def print_header(title: str):
    """Imprime cabe√ßalho formatado"""
    console.print(Panel(title, style="bold blue"))

def print_success(message: str):
    """Imprime mensagem de sucesso"""
    console.print(f"‚úÖ {message}", style="green")

def print_info(message: str):
    """Imprime mensagem informativa"""
    console.print(f"‚ÑπÔ∏è  {message}", style="blue")

def print_warning(message: str):
    """Imprime mensagem de aviso"""
    console.print(f"‚ö†Ô∏è  {message}", style="yellow")

def demonstrate_config():
    """Demonstra a configura√ß√£o do sistema"""
    print_header("üîß Configura√ß√£o do Sistema")
    
    config = get_config()
    
    table = Table(title="Configura√ß√µes Atuais")
    table.add_column("Propriedade", style="cyan")
    table.add_column("Valor", style="magenta")
    
    table.add_row("Diret√≥rio Base", str(config.base_dir))
    table.add_row("Diret√≥rio de Config", str(config.config_dir))
    table.add_row("Diret√≥rio de Logs", str(config.log_dir))
    table.add_row("Arquivo de Credenciais", str(config.credentials_file))
    table.add_row("N√≠vel de Log", config.log_level)
    table.add_row("Regi√£o Padr√£o", config.default_region)
    table.add_row("Timeout de Sess√£o", f"{config.session_timeout} segundos")
    table.add_row("M√°ximo de Tentativas", str(config.max_retries))
    
    console.print(table)
    print_success("Configura√ß√£o carregada com sucesso!")

def demonstrate_account_manager():
    """Demonstra o gerenciador de contas"""
    print_header("üë§ Gerenciador de Contas")
    
    # Cria inst√¢ncia do gerenciador
    manager = AccountManager()
    
    print_info("Gerenciador de contas inicializado")
    print_info(f"Arquivo de credenciais: {manager.credentials_file}")
    print_info(f"Chave de criptografia gerada automaticamente")
    
    # Lista contas (ser√° vazio inicialmente)
    accounts = manager.list_accounts()
    
    if not accounts:
        print_warning("Nenhuma conta AWS configurada")
        print_info("Use 'aws-agent add-account' para adicionar uma conta")
    else:
        table = Table(title="Contas AWS Configuradas")
        table.add_column("Nome", style="cyan")
        table.add_column("Regi√£o", style="magenta")
        table.add_column("Profile", style="green")
        
        for account in accounts:
            table.add_row(
                account.get('name', 'N/A'),
                account.get('region', 'N/A'),
                account.get('profile_name', 'N/A')
            )
        
        console.print(table)

def demonstrate_agent():
    """Demonstra o agente AWS"""
    print_header("ü§ñ AWS Agent")
    
    # Cria inst√¢ncia do agente
    agent = AWSAgent()
    
    print_info("AWS Agent inicializado")
    
    # Mostra status
    status = agent.get_status()
    
    table = Table(title="Status do AWS Agent")
    table.add_column("Propriedade", style="cyan")
    table.add_column("Valor", style="magenta")
    
    for key, value in status.items():
        if isinstance(value, bool):
            value = "‚úÖ" if value else "‚ùå"
        table.add_row(key, str(value))
    
    console.print(table)
    
    # Mostra servi√ßos dispon√≠veis
    print_info("Servi√ßos dispon√≠veis quando conectado:")
    services = ['ec2', 's3', 'iam', 'lambda']
    
    for service in services:
        console.print(f"  ‚Ä¢ {service.upper()}: Gerenciamento de recursos {service}")

def demonstrate_cli_commands():
    """Demonstra comandos CLI dispon√≠veis"""
    print_header("üíª Comandos CLI Dispon√≠veis")
    
    commands = [
        ("aws-agent --help", "Mostra ajuda geral"),
        ("aws-agent status", "Mostra status atual do agente"),
        ("aws-agent list-accounts", "Lista contas configuradas"),
        ("aws-agent add-account", "Adiciona nova conta AWS"),
        ("aws-agent remove-account", "Remove conta AWS"),
        ("aws-agent connect <conta>", "Conecta a uma conta espec√≠fica"),
        ("aws-agent disconnect", "Desconecta da conta atual"),
        ("aws-agent services", "Lista servi√ßos dispon√≠veis"),
        ("aws-agent interactive", "Modo interativo completo"),
        ("aws-agent start", "Inicia com sele√ß√£o interativa de conta"),
        ("aws-agent backup", "Cria backup da configura√ß√£o"),
        ("aws-agent cleanup", "Remove credenciais expiradas"),
    ]
    
    table = Table(title="Comandos CLI")
    table.add_column("Comando", style="cyan")
    table.add_column("Descri√ß√£o", style="magenta")
    
    for command, description in commands:
        table.add_row(command, description)
    
    console.print(table)

def demonstrate_services():
    """Demonstra os servi√ßos AWS suportados"""
    print_header("‚òÅÔ∏è Servi√ßos AWS Suportados")
    
    services = [
        {
            "name": "EC2",
            "description": "Gerenciamento de inst√¢ncias, volumes, security groups",
            "operations": [
                "Listar/iniciar/parar/reiniciar inst√¢ncias",
                "Gerenciar volumes EBS",
                "Configurar security groups",
                "Conex√£o SSH/RDP/Session Manager"
            ]
        },
        {
            "name": "S3",
            "description": "Gerenciamento de buckets e objetos",
            "operations": [
                "Criar/deletar buckets",
                "Upload/download de arquivos",
                "Configurar pol√≠ticas de bucket",
                "Gerenciar versionamento"
            ]
        },
        {
            "name": "IAM",
            "description": "Gerenciamento de identidades e acessos",
            "operations": [
                "Gerenciar usu√°rios e grupos",
                "Configurar roles e pol√≠ticas",
                "Gerenciar chaves de acesso",
                "Auditoria de permiss√µes"
            ]
        },
        {
            "name": "Lambda",
            "description": "Gerenciamento de fun√ß√µes serverless",
            "operations": [
                "Deploy de fun√ß√µes",
                "Gerenciar layers",
                "Configurar triggers",
                "Monitorar execu√ß√µes"
            ]
        }
    ]
    
    for service in services:
        console.print(f"\n[bold cyan]{service['name']}[/bold cyan]: {service['description']}")
        for operation in service['operations']:
            console.print(f"  ‚Ä¢ {operation}")

def demonstrate_automation():
    """Demonstra capacidades de automa√ß√£o"""
    print_header("üîÑ Automa√ß√£o e Scripts")
    
    print_info("O AWS Agent suporta automa√ß√£o atrav√©s de:")
    
    automation_features = [
        "Scripts Python usando as classes do core",
        "Comandos CLI em shell scripts",
        "Configura√ß√£o via vari√°veis de ambiente",
        "Integra√ß√£o com CI/CD pipelines",
        "Backup e restaura√ß√£o autom√°tica",
        "Monitoramento e alertas"
    ]
    
    for feature in automation_features:
        console.print(f"  ‚Ä¢ {feature}")
    
    console.print(f"\n[bold]Exemplo de script automatizado:[/bold]")
    console.print("Veja o arquivo: examples/advanced_usage.py")

def run_demo():
    """Executa a demonstra√ß√£o completa"""
    console.print("""
[bold blue]üöÄ AWS Multi-Account Agent - Demonstra√ß√£o[/bold blue]

Esta demonstra√ß√£o mostra todas as funcionalidades do AWS Agent
sem precisar de credenciais AWS reais.
    """)
    
    try:
        demonstrate_config()
        time.sleep(2)
        
        demonstrate_account_manager()
        time.sleep(2)
        
        demonstrate_agent()
        time.sleep(2)
        
        demonstrate_cli_commands()
        time.sleep(2)
        
        demonstrate_services()
        time.sleep(2)
        
        demonstrate_automation()
        
        console.print("""
[bold green]‚úÖ Demonstra√ß√£o Conclu√≠da![/bold green]

Para come√ßar a usar o AWS Agent:

1. [cyan]aws-agent add-account[/cyan] - Adicione suas credenciais AWS
2. [cyan]aws-agent connect <nome-da-conta>[/cyan] - Conecte a uma conta
3. [cyan]aws-agent interactive[/cyan] - Use o modo interativo

Para mais informa√ß√µes, consulte o README.md
        """)
        
    except KeyboardInterrupt:
        console.print("\n[yellow]Demonstra√ß√£o interrompida pelo usu√°rio[/yellow]")
    except Exception as e:
        console.print(f"\n[red]Erro durante a demonstra√ß√£o: {e}[/red]")

if __name__ == "__main__":
    run_demo()
