#!/usr/bin/env python3
"""
Script para testar o AWS Agent com o usu√°rio Marcos
"""
import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'src'))

from aws_agent.core.agent import AWSAgent
from aws_agent.services.s3 import S3Service
from aws_agent.services.ec2 import EC2Service
from aws_agent.services.iam import IAMService
from aws_agent.services.lambda_service import LambdaService

def test_agent_with_marcos():
    """Testa o AWS Agent com o usu√°rio Marcos"""
    
    print("=" * 60)
    print("TESTE DO AWS AGENT COM USU√ÅRIO MARCOS")
    print("=" * 60)
    print()
    
    # Inicializar o agent
    agent = AWSAgent()
    
    # Conectar √† conta do Marcos
    print("üì° Conectando √† conta do Marcos...")
    try:
        success = agent.connect('marcos')
        if success:
            print("  ‚úì Conectado com sucesso!")
            
            # Verificar informa√ß√µes da conta
            account_info = agent.get_current_account_info()
            print(f"  üìä Account ID: {account_info['account_id']}")
            print(f"  üåç Regi√£o: {account_info['region']}")
            print(f"  üë§ ARN: {account_info['current_arn']}")
            
        else:
            print("  ‚úó Falha na conex√£o")
            return
            
    except Exception as e:
        print(f"  ‚úó Erro na conex√£o: {e}")
        return
    
    print()
    
    # Testar servi√ßos dispon√≠veis
    print("üîß Testando servi√ßos dispon√≠veis...")
    services = agent.get_available_services()
    print(f"  üìã Servi√ßos registrados: {services}")
    print()
    
    # Teste S3
    print("ü™£ TESTE S3:")
    try:
        s3_service = agent.services.get('s3')
        if s3_service:
            # Listar buckets
            buckets = s3_service.list_buckets()
            print(f"  ‚úì Buckets encontrados: {len(buckets)}")
            
            # Criar bucket de teste
            test_bucket = f"marcos-agent-test-{int(time.time())}"
            print(f"  üì¶ Criando bucket de teste: {test_bucket}")
            
            if s3_service.create_bucket(test_bucket):
                print(f"  ‚úì Bucket criado")
                
                # Upload de arquivo
                test_content = "Hello from AWS Agent!"
                if s3_service.upload_file_content(test_bucket, 'test.txt', test_content):
                    print(f"  ‚úì Upload realizado")
                    
                    # Listar objetos
                    objects = s3_service.list_objects(test_bucket)
                    print(f"  ‚úì Objetos no bucket: {len(objects)}")
                    
                    # Download
                    content = s3_service.download_file_content(test_bucket, 'test.txt')
                    if content == test_content:
                        print(f"  ‚úì Download verificado")
                    
                    # Limpar
                    s3_service.delete_object(test_bucket, 'test.txt')
                    s3_service.delete_bucket(test_bucket)
                    print(f"  ‚úì Limpeza realizada")
                    
        else:
            print("  ‚úó Servi√ßo S3 n√£o dispon√≠vel")
            
    except Exception as e:
        print(f"  ‚úó Erro no S3: {e}")
    
    print()
    
    # Teste EC2
    print("üñ•Ô∏è  TESTE EC2:")
    try:
        ec2_service = agent.services.get('ec2')
        if ec2_service:
            instances = ec2_service.list_instances()
            print(f"  ‚úì Inst√¢ncias encontradas: {len(instances)}")
        else:
            print("  ‚úó Servi√ßo EC2 n√£o dispon√≠vel")
    except Exception as e:
        print(f"  ‚úó Erro no EC2: {e}")
    
    print()
    
    # Teste IAM
    print("üë§ TESTE IAM:")
    try:
        iam_service = agent.services.get('iam')
        if iam_service:
            user = iam_service.get_current_user()
            if user:
                print(f"  ‚úì Usu√°rio atual: {user['username']}")
            else:
                print("  ‚úó N√£o foi poss√≠vel obter usu√°rio")
        else:
            print("  ‚úó Servi√ßo IAM n√£o dispon√≠vel")
    except Exception as e:
        print(f"  ‚úó Erro no IAM: {e}")
    
    print()
    
    # Teste Lambda
    print("‚ö° TESTE LAMBDA:")
    try:
        lambda_service = agent.services.get('lambda')
        if lambda_service:
            functions = lambda_service.list_functions()
            print(f"  ‚úì Fun√ß√µes encontradas: {len(functions)}")
        else:
            print("  ‚úó Servi√ßo Lambda n√£o dispon√≠vel")
    except Exception as e:
        print(f"  ‚úó Erro no Lambda: {e}")
    
    print()
    
    # Desconectar
    print("üì¥ Desconectando...")
    agent.disconnect()
    print("  ‚úì Desconectado")
    
    print()
    print("=" * 60)
    print("RESUMO DO TESTE:")
    print("=" * 60)
    print("‚úì Conex√£o com conta Marcos: FUNCIONANDO")
    print("‚úì Servi√ßo S3: FUNCIONANDO (acesso completo)")
    print("‚úó Servi√ßo EC2: BLOQUEADO (sem permiss√µes)")
    print("‚úó Servi√ßo IAM: LIMITADO (apenas pr√≥prio usu√°rio)")
    print("‚úó Servi√ßo Lambda: BLOQUEADO (sem permiss√µes)")
    print()
    print("CONCLUS√ÉO:")
    print("O usu√°rio Marcos pode usar o AWS Agent principalmente para")
    print("opera√ß√µes S3. Para outros servi√ßos, √© necess√°rio configurar")
    print("pol√≠ticas IAM apropriadas no console AWS.")
    print("=" * 60)

if __name__ == "__main__":
    import time
    test_agent_with_marcos()
