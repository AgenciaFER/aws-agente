#!/usr/bin/env python3
"""
Script para testar permiss√µes espec√≠ficas do usu√°rio Marcos
"""
import boto3
import json
from botocore.exceptions import ClientError, NoCredentialsError

def test_specific_permissions():
    """Testa permiss√µes espec√≠ficas do usu√°rio AWS"""
    
    # Configurar credenciais
    session = boto3.Session(
        aws_access_key_id='AKIA****************',
        aws_secret_access_key='************************************',
        region_name='us-east-1'
    )
    
    print("=" * 60)
    print("TESTE DETALHADO DE PERMISS√ïES - USU√ÅRIO MARCOS")
    print("=" * 60)
    print()
    
    # Teste S3 detalhado
    print("ü™£ TESTE DETALHADO S3:")
    try:
        s3 = session.client('s3')
        
        # Criar bucket de teste
        test_bucket = f"marcos-test-bucket-{int(time.time())}"
        print(f"  Tentando criar bucket: {test_bucket}")
        try:
            s3.create_bucket(Bucket=test_bucket)
            print(f"  ‚úì Bucket criado com sucesso")
            
            # Testar upload
            s3.put_object(Bucket=test_bucket, Key='test.txt', Body=b'Hello World')
            print(f"  ‚úì Upload realizado com sucesso")
            
            # Testar listagem
            objects = s3.list_objects_v2(Bucket=test_bucket)
            print(f"  ‚úì Listagem realizada: {objects.get('KeyCount', 0)} objetos")
            
            # Limpar
            s3.delete_object(Bucket=test_bucket, Key='test.txt')
            s3.delete_bucket(Bucket=test_bucket)
            print(f"  ‚úì Limpeza realizada")
            
        except ClientError as e:
            print(f"  ‚úó Erro ao criar bucket: {e.response['Error']['Code']}")
            
    except Exception as e:
        print(f"  ‚úó Erro geral no S3: {e}")
    print()
    
    # Teste EC2 detalhado
    print("üñ•Ô∏è  TESTE DETALHADO EC2:")
    try:
        ec2 = session.client('ec2')
        
        # Tentar diferentes opera√ß√µes
        operations = [
            ('describe_instances', 'Listar inst√¢ncias'),
            ('describe_images', 'Listar AMIs'),
            ('describe_key_pairs', 'Listar key pairs'),
            ('describe_security_groups', 'Listar security groups'),
            ('describe_volumes', 'Listar volumes'),
            ('describe_snapshots', 'Listar snapshots'),
            ('describe_availability_zones', 'Listar zonas de disponibilidade'),
            ('describe_regions', 'Listar regi√µes')
        ]
        
        for operation, description in operations:
            try:
                if operation == 'describe_snapshots':
                    # Limitar snapshots pr√≥prios
                    result = getattr(ec2, operation)(OwnerIds=['self'])
                elif operation == 'describe_images':
                    # Limitar AMIs pr√≥prias
                    result = getattr(ec2, operation)(Owners=['self'])
                else:
                    result = getattr(ec2, operation)()
                
                count = len(result.get(list(result.keys())[0], []))
                print(f"  ‚úì {description}: {count} itens")
                
            except ClientError as e:
                print(f"  ‚úó {description}: {e.response['Error']['Code']}")
                
    except Exception as e:
        print(f"  ‚úó Erro geral no EC2: {e}")
    print()
    
    # Teste IAM detalhado
    print("üë§ TESTE DETALHADO IAM:")
    try:
        iam = session.client('iam')
        
        # Tentar diferentes opera√ß√µes
        operations = [
            ('get_user', 'Obter informa√ß√µes do usu√°rio'),
            ('list_access_keys', 'Listar chaves de acesso'),
            ('list_attached_user_policies', 'Listar pol√≠ticas anexadas'),
            ('get_groups_for_user', 'Obter grupos do usu√°rio'),
            ('list_users', 'Listar usu√°rios'),
            ('list_groups', 'Listar grupos'),
            ('list_roles', 'Listar roles'),
            ('list_policies', 'Listar pol√≠ticas')
        ]
        
        for operation, description in operations:
            try:
                if operation in ['get_user', 'list_access_keys', 'list_attached_user_policies', 'get_groups_for_user']:
                    # Opera√ß√µes que precisam do nome do usu√°rio
                    if operation == 'get_user':
                        result = getattr(iam, operation)()
                        print(f"  ‚úì {description}: {result['User']['UserName']}")
                    else:
                        result = getattr(iam, operation)(UserName='marcos')
                        key = list(result.keys())[0]
                        count = len(result.get(key, []))
                        print(f"  ‚úì {description}: {count} itens")
                else:
                    result = getattr(iam, operation)()
                    key = list(result.keys())[0]
                    count = len(result.get(key, []))
                    print(f"  ‚úì {description}: {count} itens")
                    
            except ClientError as e:
                print(f"  ‚úó {description}: {e.response['Error']['Code']}")
                
    except Exception as e:
        print(f"  ‚úó Erro geral no IAM: {e}")
    print()
    
    # Teste Lambda detalhado
    print("‚ö° TESTE DETALHADO LAMBDA:")
    try:
        lambda_client = session.client('lambda')
        
        # Tentar diferentes opera√ß√µes
        operations = [
            ('list_functions', 'Listar fun√ß√µes'),
            ('list_layers', 'Listar layers'),
            ('list_event_source_mappings', 'Listar mapeamentos de eventos')
        ]
        
        for operation, description in operations:
            try:
                result = getattr(lambda_client, operation)()
                key = list(result.keys())[0]
                count = len(result.get(key, []))
                print(f"  ‚úì {description}: {count} itens")
                
            except ClientError as e:
                print(f"  ‚úó {description}: {e.response['Error']['Code']}")
                
    except Exception as e:
        print(f"  ‚úó Erro geral no Lambda: {e}")
    print()
    
    print("=" * 60)
    print("RESUMO DE PERMISS√ïES:")
    print("=" * 60)
    print("‚úì S3: Acesso COMPLETO (criar, listar, upload, download, deletar)")
    print("‚úó EC2: Acesso NEGADO (UnauthorizedOperation)")
    print("‚úó IAM: Acesso LIMITADO (apenas pr√≥prio usu√°rio)")
    print("‚úó Lambda: Acesso NEGADO (AccessDeniedException)")
    print("‚úó CloudWatch: Acesso NEGADO")
    print()
    print("RECOMENDA√á√ïES:")
    print("- O usu√°rio Marcos tem permiss√µes principalmente para S3")
    print("- Para EC2, Lambda e outros servi√ßos, √© necess√°rio adicionar pol√≠ticas IAM")
    print("- Considere anexar pol√≠ticas como 'EC2ReadOnlyAccess', 'AWSLambdaReadOnlyAccess'")
    print("=" * 60)

if __name__ == "__main__":
    import time
    test_specific_permissions()
